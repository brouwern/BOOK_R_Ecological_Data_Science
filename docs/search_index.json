[
["index.html", "R for Ecological Data Science: A Gentle Introduction Preface", " R for Ecological Data Science: A Gentle Introduction Nathan L. Brouwer 2018-08-17 Preface This book grew out of exercises used for the computer lab portion of ENS 495:Design &amp; Analysis, an ecological statistics course I taught for two years as and adjunct with the Department of Department of Biological &amp; Environmental Sciences at California University of Pennsylvania. The goal is to walk students step by step through the process of working with data in R. A major influence in how this book is written is th online book Program MARK: a gentle introduction, edited Evan Cooch and Gary White. MARK is one of the most important pieces of software ever written for ecologists and implements a vast number of mark-recapture and occupancy-type models for understanding population processes such as population size, survival, migration, occupancy, and meta-population dynamics. The book patiently walks users through the basic of these models step by step, concept by concept, and click by click. I have sought to adopt a similar thorough and holistic approach in this book. "],
["introduction-what-is-ecological-data-science-how-will-this-book-teach-it.html", "Chapter 1 Introduction: What is Ecological Data Science &amp; How Will this Book Teach It? 1.1 What is data science? 1.2 Goals 1.3 Approach 1.4 Requirements 1.5 Refereces 1.6 Bibliography", " Chapter 1 Introduction: What is Ecological Data Science &amp; How Will this Book Teach It? [NOTE: This section is currently underdevelopment. The paper by Touchon &amp; McCoy (2016) and its references lay out many of the reasons for the statistical focus of this book.] “Ecological questions and data are becoming increasingly complex and as a result we are seeing the development and proliferation of sophisticated statistical approaches in the ecological literature. … It is no longer sufficient to only ask ‘whether’ or ‘which’ experimental manipulations significantly deviate from null expectations. Instead, we are moving toward parameter estimation and asking ‘how much’ and in ‘what direction’ ecological processes are affected by different mechanisms” (Touchon &amp; McCoy 2016, Ecosphere, emphsis mine) “Spreadsheets are often used as the basis of data collection and education; but this is potentially problematic since spreadsheets typically do not promote good data management practices…. The features of spreadsheets that make them desirable for the average researcher, such as extensibility, use of formatting for organization, embedding charts, make them undesirable for preparing data for long‐term archiving and reuse.”(Strasser &amp; Hampton 2012 Ecosphere) 1.1 What is data science? Data analysis include “procedures for analyzing data, techniques for interpreting the results…, ways of planning the gathering of data to make its analysis easier, more precise or more accurate, and all the machinery and results of (mathematical) statistics which apply to analyzing data.” John Tukey, “The future of data analysis”, Annals of Mathematical Statistics, 1962. People argue about what data science is What Tukey calls “data analysis” is now termed “data science” by many. Some define data science as closely allied with computer science and want its use most closely associated with things like “big data”, data mining, machine learning, and artificial intelligence. Others, such as RStudio’s Hadley Whickham (creator of ggplot2, dplyr, and most of the infrasture of the tidyverse of R package) define it more broadly to involve all aspects of the life cycle of data. (Wickham also defines a data scientists as “A data scientist is a statistician who is wearing a bow tie” https://twitter.com/hadleywickham/status/906146116412039169?lang=en) 1.2 Goals “The rise of computer programming, computational power, and modern statistical approaches may…” allow “…scientists to ask new questions and to extract more information from data than ever before.” (Touchon &amp; McCoy 2016, Ecosphere) Statistical computing using R, RStudio, and rmarkdown Data analysis, from t-tests to mixed models in R Current statistical practice, with an emphasis on statistical modeling and effect size estimation instead of “statistical tests” Data visualization, with an emphasis on ggplot2 Data science, from data management best practices to data cleaning with dplyr Computational reproducibility, from formatting scripts to using rmarkdown to write reproducible reports Dropping things that aren’t needed, like classical rank-based nonparametric methods. 1.3 Approach always explore and visualize data step-by-step instructions frequently refreshing and review comprehensive and self-contained 1.4 Requirements R RStudio External packages loaded via RStudio 1.5 Refereces Strasser &amp; Hampton 2012. The fractured lab notebook: undergraduates and ecological data management training in the United States. EcoSphere. https://esajournals.onlinelibrary.wiley.com/doi/abs/10.1890/ES12-00139.1 Touchon &amp; McCoy 2017. The mismatch between current statistical practice and doctoral training in ecology. EcoSphere. https://esajournals.onlinelibrary.wiley.com/doi/abs/10.1002/ecs2.1394 Tukey. 1962. The future of data analysis. Annals of Mathematical Statistics. https://www.jstor.org/stable/2237638 1.6 Bibliography Relevant papers cited by Touchon &amp; McOy 2017. Barraquand, F., T. H. G. Ezard, P. S. Jørgensen, N. Zimmerman, S. Chamberlain, R. Salguero‐Gómez, T. J. Curran, and T. Poisot. 2014. Lack of quantitative training among early‐career ecologists: a survey of the problem and potential solutions. PeerJ 2:e285. Butcher, J. A., J. E. Groce, C. M. Lituma, M. C. Cocimano, Y. Sánchez‐Johnson, A. J. Campomizzi, T. L. Pope, K. S. Reyna, and A. C. S. Knipps. 2007. Persistent controversy in statistical approaches in wildlife sciences: a perspective of students. Journal of Wildlife Management 71:2142–2144 Ellison, A. M., and B. Dennis. 2009. Paths to statistical fluency for ecologists. Frontiers in Ecology and the Environment 8:362–370. Germano, J. D. 2000. Ecology, statistics, and the art of misdiagnosis: the need for a paradigm shift. Environmental Reviews 7:167–190. Quinn, J. F., and A. E. Dunham. 1983. On hypothesis testing in ecology and evolution. American Naturalist 122:602–617. "],
["what-is-r-and-why-use-it.html", "Chapter 2 What is R and why use it? 2.1 How do we typically use software in science? 2.2 What does R do? 2.3 Why use R 2.4 Who uses it? 2.5 R and computational reproducibility 2.6 Alternatives to R", " Chapter 2 What is R and why use it? [these notes are from a lecture and have not been re-written much yet] R is a powerful piece of software used for data science and data analysis. In this chapter I will briefly introduce the advantages of using R, why you might want to learn it, and also indicate some alternatives and adjuncts you could consider. 2.1 How do we typically use software in science? Most scientists rely on both general and specialized pieces of software for various parts of their work. For data entry they likely use spreadsheet software Excel, though increasingly Google Sheets. For data analysis they might use one of many options, such as GraphPad Prism, Minitab, SAS, SPSS, or STATA. For making plots, many people will export their export their results back to Excel, while others use specialized software like SigmaPlot. Many scientists also use specialized programs; in ecology many researchers do GIS in ArcGIS or QGIS, mark-recapture analysis in Program MARK or Distance, use RAMAS or Vortex for population viability analysis, or build custom mathematical programs in MatLab or Python. If they do multivariate statistics like [ordination](https://en.wikipedia.org/wiki/Ordination_(statistics) the may use a specialized stats program like PC-ORD. Since software can be expensive, some scientists will rely on Excel for all of their work. Excel can do many things, but it can’t do everything all the specialized types of software can do. Moreover, its very limited in the range of statistics it can do and graphs it can make. 2.2 What does R do? R is amazing because it has been explicitly developed to do several things very well, particularly statistics, math, making great-looking figures, and writing computer programs to automate these tasks. Additionally, R has been extended by developers to be able to be a powerful tool for data cleaning and organization, to be used as a GIS, and as an integrated word processor and website make for publishing work. 2.3 Why use R In addition to is many capabilities, R has the advantage this it is free anyone, always used by statisticians to develop new statistical techniques, so new techniques often come out 1st in R used by almost all ecological statisticians to develop new techniques (mark recapture, distance sampling) 2.4 Who uses it? R continues to increase in popularity. Among data scientists it is second only to Python. Among academics it has eclipsed SAS in many fields. It is also used by analyses in many large companies, such Facebook, and by journalists looking for stories in or reporting on large volumes of data see http://blog.revolutionanalytics.com/2014/05/companies-using-r-in-2014.html for further discussion. 2.5 R and computational reproducibility One factor potentially contributing to R’s popularity, or at least a major bonus for using it, is ease of use for making analyses reproducible. All commands in R are typed out and the best way to do this is in a static script file from which you send commands to R to execute. This creates a record of your analyses. This feature is shared by other programs such as SAS and Stats, and other programming languages such as Matlab and Python. The advantage of R is that the script files are simply plain text files which anyone can open and - if they’ve downloaded R, which is free - they can run. Developers have also created numerous tools for creating reproducible analysis workflows and which allow R to be used in all data-related aspects of a project, from data cleaning to formatting journal submissions. What this means is that without become an expert programmer you can set up your work so that you can re-run all of your data cleaning, analyses, and graph building with a single command in R. This makes what you’ve done auditable, transparent, and easy to re-use for future work. 2.6 Alternatives to R R has many advantages, but it has one critical issue: the learning curve. R is a command-line driven analysis tool, which means you type out specific commands for almost everything single thing R does. Excel is pretty user friendly, and several stats programs similarly use point-and-click interfaces, such as SPSS, JMP, and Stata SAS also requires a lot of command writing, but is generally consider more user friendly than R. Recently, two free point-and-click statistical analysis programs have been release that are built on R but require no programming. JASP (“Just another statistics program”) has an emphasis on Bayesian statistics, particularly Bayesian hypothesis testing using Bayes factors (an approach increasing in popularity, especially in psychology, but which some Bayesians, like Andrew Gelman, disavow). While JASP is based on R, it does not currently allow access to the underlying R code. Jamovi has a similar spirit as JASP (indeed, it was founded by developers who had worked on JASP) but is more transparent about the underlying R code being used to run the analysis. "],
["a-first-encounter-with-r-rstudio.html", "Chapter 3 A first encounter with R &amp; RStudio Vocabulary R commands 3.1 Getting started with R and RStudio 3.2 Getting R onto your computer 3.3 Getting RStudio on to your computer 3.4 Getting started with R itself (or not) 3.5 Getting started with RStudio 3.6 Help! 3.7 Other features of RStudio 3.8 Practice (OPTIONAL)", " Chapter 3 A first encounter with R &amp; RStudio Nathan Brouwer, Phd brouwern@gmail.com https://github.com/brouwern Vocabulary console script editor / source viewer interactive programming scripts / script files .R files text files / plain text files command execution / execute a command from script editor comments / code comments commenting out / commenting out code stackoverflow.com rstats R commands c(…) mean(…) sd(…) ? read.csv(…) 3.1 Getting started with R and RStudio R is a piece of software that does calculations and makes graphs. RStudio is a GUI (graphical user interface) that acts as a front-end to R Your can use R directly, but most people use a GUI of some kind RStudio has become the most popular GUI The following instructions will lead you click by click through downloading R and RStudio and starting an initial session. If you have trouble with downloading either program go to YouTube and search for something like “Downloading R” or “Installing RStudio” and you should be able to find something helpful, such as “How to Download R for Windows”. 3.2 Getting R onto your computer To get R on to your computer first go to the CRAN website at https://cran.r-project.org/ (CRAN stands for “comprehensive R Archive Network”). At the top of the screen are three bullet points; select the appropriate one (or click the link below) Download R for Linux Download R for (Mac) OS X Download R for Windows Each page is formatted slightly differently. For a current Mac, click on the top link, which as of 8/16/2018 was “R-3.5.1.pkg” or click this link. If you have an older Mac you might have to scroll down to find your operating system under “Binaries for legacy OS X systems.” For PC select “base” or click this link. When its downloaded, run the installer and accept the default. 3.3 Getting RStudio on to your computer RStudio is an R interface developed by a company of the same name. RStudio has a number of commercial products, but much of their portfolio is freeware. You can download RStudio from their website www.rstudio.com/ . The download page (www.rstudio.com/products/rstudio/download/) is a bit busy because it shows all of their commercial products; the free version is on the far left side of the table of products. Click on the big green DOWNLOAD button under the column on the left that says “RStudio Desktop Open Source License” (or click on this link ). This will scroll you down to a list of downloads titled “Installers for Supported Platforms.” Windows users can select the top option RStudio 1.1.456 - Windows Vista/7/8/10 and Mac the second option RStudio 1.1.456 - Mac OS X 10.6+ (64-bit). (Versions names are current of 8/16/2018). Run the installer after it downloads and accept the default. RStudio will automatically link up with the most current version of R you have on your computer. Find the RStudio icon on your desktop or search for “RStudio” from your task bar and you’ll be read to go. 3.3.1 Keep R and RStudio current Both R and RStudio undergo regular updates and you will occasionally have to re-download and install one or both of them. In practice I probably do this about every 6 months. 3.4 Getting started with R itself (or not) This is a walk-through of a very basic R session. It assumes you have successfully installed R and RStudio onto your computer, and nothing else. Most people who use R do not actually use the program itself - they use a GUI (graphical user interface) “front end” that make R a bit easier to use. However, you will probably run into the icon for the underlying R program on your desktop or elsewhere on your computer. It usually looks like this: Figure 3.1: The R logo The long string of numbers have to do with the version and whether is 32 or 64 bit (not important for what we do). If you are curious you can open it up and take a look - it actually looks a lot like RStudio, where we will do all our work (or rather, RStudio looks like R). Sometimes when people are getting started with R they will accidentally open R instead of RStudio; if things don’t seem to look or be working the way you think they should, you might be in R, not RStudio 3.5 Getting started with RStudio Now we’ll get started with RStudio. We’ll get to know what it looks like and configure it a bit for out needs. 3.5.1 RStudio at first glance The RStudio logo looks like this. Figure 3.2: The RSTudio logo When you open up you’ll be greeted by a fairly busy array of menus and things. Don’t panic! A typical fresh starting point in RStudio is shown in Figure 2. Figure 3.3: RStudio when first opened. When referring to RStudio, there are two terms that need to be understood. As shown in Figure 3, there is the console section of RStudio and the script editor or source viewer. Figure 3.4: RStudio’s console &amp; script editor. An “cheat sheet” called the “RStudio IDE Cheat Sheet” details all of RStudio’s many features and is available at https://www.rstudio.com/resources/cheatsheets/ 3.5.2 The console versus the script editor You can type and enter text into both the console and the script editor. The console, however, respond like a calculator, while the script editor works more like a text editor. 3.5.2.1 The R console The console in RStudio act exactly the same way as it does in R. This is an interactive programming situation that is very similar to a scientific calculator. If you click your mouse inside the console and type “1 + 1” then press enter you will see the following type of output 1 + 1 ## [1] 2 Note that right in front of where you typed “1+1” there is a “&gt;” symbol. This is always in the R console and never needs to be typed. One thing to note about R is that it’s not particular about spacing. All of the following things will yield the same results 1+1 1 + 1 1 + 1 3.5.2.2 R’s console as a scientific calculator You can interact with R’s console similar to a scientific calculator. For example, you can use parentheses to set up mathematical statements like 5*(1+1) ## [1] 10 Note however that you have to be explicit about multiplication. If you try the following it won’t work. 5(1+1) R also has built-in functions that work similar to what you might have used in Excel. For example, in Excel you can calculate the average of a set of numbers by typing “=average(1,2,3)” into a cell. R can do the same thing except The command is “mean” You don’t start with “=” You have to package up the numbers like what is shown below using “c(…)” mean(c(1,2,3)) ## [1] 2 Where “c(…)” packages up the numbers the way the mean() function wants to see them. If you just do the following R will give you an answer, but its the wrong one mean(1,2,3) This is a common issue with R – and many programs, really – it won’t always tell you when somethind didn’t go as planned. This is because it doesn’t know something didn’t go as planned; you have to learn the rules R plays by. 3.5.2.3 Practice: math in the console See if you can reproduce the following results Division 10/3 ## [1] 3.333333 The standard deviation sd(c(5,10,15)) # note the use of &quot;c(...)&quot; ## [1] 5 3.5.2.4 The script editor While you can interact with R directly within the console, the standard way to work in R is to write what are known as scripts. These are computer code instructions written to R in a script file. These are save with the extension .R but area really just a form of plain text file. To work with scripts, what you do is type commands in the script editor, then tell R to excute the command. This can be done several ways. First, you tell RStudio the line of code you want to run by either * Placing the cursor at the end a line of code, OR * Clicking and dragging over the code you want to run in order highlight it. Second, you tell RStudio to run the code by * Clicking the “Run” icon in the upper right hand side of the script editor (a grey box with a green error emerging from it) * pressing the control key (“ctrl)” and then then enter key on the keyboard The code you’ve chosen to run will be sent by RStudio from the script editor over to the console. The console will show you both the code and then the output. You can run several lines of code if you want; the console will run a line, print the output, and then run the next line. First I’ll use the command mean(), and then the command sd() for the standard deviation: mean(c(1,2,3)) ## [1] 2 sd(c(1,2,3)) ## [1] 1 3.5.2.5 Comments One of the reasons we use script files is that we can combine R code with comments that tell us what the R code is doing. Comments are preceded by the hashtag symbol #. Frequently we’ll write code like this: #The mean of 3 numbers mean(c(1,2,3)) If you highlight all of this code (including the comment) and then click on “run”, you’ll see that RStudio sends all of the code over console. ## [1] 2 Comments can also be placed at the end of a line of code mean(c(1,2,3)) #Note the use of c(...) Sometimes we write code and then don’t want R to run it. We can prevent R from executing the code even if its sent to the console by putting a “#” infront of the code. If I run this code, I will get just the mean but not the sd. mean(c(1,2,3)) #sd(c(1,2,3)) Doing this is called commenting out a line of code. 3.6 Help! There are many resource for figuring out R and RStudio, including R’s built in “help” function Q&amp;A websites like stackoverflow.com twitter, using the hashtag #rstats blogs online books and course materials 3.6.1 Getting “help” from R If you are using a function in R you can get info about how it works like this ?mean In RStudio the help screen should appear, probably above your console. If you start reading this help file, though, you don’t have to go far until you start seeing lots of R lingo, like “S3 method”,“na.rm”, “vectors”. Unfortunately, the R help files are usually not written for beginners, and reading help files is a skill you have to acquire. For example, when we load data into R in subsequent lessons we will use a function called “read.csv” Access the help file by typing “?read.csv” into the console and pressing enter. Surprisingly, the function that R give you the help file isn’t what you asked for, but is read.table(). This is a related function to read.csv, but when you’re a beginner thing like this can really throw you off. Kieran Healy as produced a great cheatsheet for reading R’s help pages as part of his forthcoming book. It should be available online at http://socviz.co/appendix.html#a-little-more-about-r 3.6.2 Getting help from the internet The best way to get help for any topic is to just do an internet search like this: “R read.csv”. Usually the first thing on the results list will be the R help file, but the second or third will be a blog post or something else where a usually helpful person has discussed how that function works. Sometimes for very basic R commands like this might not always be productive but its always work a try. For but things related to stats, plotting, and programming there is frequently lots of information. Also try searching YouTube. 3.6.3 Getting help from online forums Often when you do an internet search for an R topic you’ll see results from the website www.stackoverflow.com, or maybe www.crossvalidated.com if its a statistics topic. These are excellent resources and many questions that you may have already have answers on them. Stackoverflow has an internal search function and also suggests potentially relevant posts. Before posting to one of these sites yourself, however, do some research; there is a particular type and format of question that is most likely to get a useful response. Sadly, people new to the site often get “flamed” by impatient pros. 3.6.4 Getting help from twitter Twitter is a surprisingly good place to get information or to find other people knew to R. Its often most useful to ask people for learning resources or general reference, but you can also post direct questions and see if anyone responds, though usually its more advanced users who engage in twitter-based code discussion. A standard tweet might be “Hey #rstats twitter, am knew to #rstats and really stuck on some of the basics. Any suggestions for good resources for someone starting from scratch?” 3.7 Other features of RStudio 3.7.1 Ajusting pane the layout You can adjust the location of each of RStudio 4 window panes, as well as their size. To set the pane layout go to 1. ”Tools” on the top menu 1. ”Global options” 1. “Pane Layout” Use the drop-down menus to set things up. I recommend 1. Lower left: “Console”&quot; 1. Top right: “Source” 1. Top left: “Plot, Packages, Help Viewer” 1. This will leave the “Environment…” panel in the lower right. 3.7.2 Adjusting size of windows You can clicked on the edge of a pane and adjust its size. For most R work we want the console to be big. For beginners, the “Environment, history, files” panel can be made really small. 3.8 Practice (OPTIONAL) Practice the following operations. Type the directly into the console and execute them. Also write them in a script in the script editor and run them. Square roots sqrt(42) ## [1] 6.480741 The date Some functions in R can be executed within nothing in the parentheses. date() ## [1] &quot;Fri Aug 17 13:11:23 2018&quot; Exponents The ^ is used for exponents 42^2 ## [1] 1764 A series of numbers A colon between two numbers creates a series of numbers. 1:42 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ## [24] 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 logs The default for the log() function is the natural log. log(42) ## [1] 3.73767 log10() gives the base-10 log. log10(42) ## [1] 1.623249 exp() raises e to a power exp(3.73767) ## [1] 42.00002 Multiple commands can be nested sqrt(42)^2 log(sqrt(42)^2) exp(log(sqrt(42)^2)) "],
["the-different-faces-of-r-code-the-console-scripts-rmarkdown.html", "Chapter 4 The different faces of R code: The console, scripts &amp; RMarkdown 4.1 The console 4.2 Scripts 4.3 Organizing scripts 4.4 RMarkdown", " Chapter 4 The different faces of R code: The console, scripts &amp; RMarkdown There are a number of ways to interact with R Directly in the console, like a scientific calculator Using script files (.R) with R code types out and sent over to the console notes “commented out” using hastags “#” rmarkdown (.Rmd) files with R code in species code chunks notes written like in a word precessor formatting using markdown, a markup language This chapter will briefly introduce these different ways of working in R 4.1 The console In a previous chapter we introduced the console. You can interact with the console in a similar manner as a scientific calculator. Figure 4.1: The RStudio console As you execute more commands, the move up the screen. You can scroll back up to see what you’ve done previously. 4.2 Scripts You can create a record of the commands you have executed in the console, but this isn’t a very efficient way to work. If you want to keep track of the commands you’re running (and often you do) its best to write them in a script file and then send them over to the console to execute the code. 4.2.1 Creating scripts When you open RStudio a blank script file will be open. Subsequently, RStudio will open files you have worked with previously. To create a new blank script file: Click on File New File R script or just type control + shift + N (on a PC) or command + shift + N on (?on mac), which is similar how you make a new document in most programs. Figure 4.2: Creating a new R script file You can create or open multiple scripts, which RStudio organizes as tabs like in a web browser. Figure 4.3: R Script file with comments in RStudio 4.2.2 Running code from a script To run a code you can either place click to the righ of the line of code and click the “run” button. Figure 4.4: Running code using RStudios RUN button. Note cursor to the right of the code You can also highlight the code by clicking and dragging over it. This is useful when you have multiple lines of code. Figure 4.5: Highlighted code in an RStudio script 4.2.3 Running code with keyboard shortcuts Want to look like an R pro? Learn keyboard shortcuts so you don’t have to use the mouse. Both of the above methods work using simple keyboard shortcuts: PCs: Control + Enter Macs: Command + Enter (?) Another handy shortcut is “Control + 2”, which moves your computer’s cursor from the script editor to the console. (Control + 2 moves it from console to editor) 4.3 Organizing scripts “You mostly collaborate with yourself, and me-from-two-months-ago never responds to email.” (Karen Cranston, paraphrasing Mark Holder; quoted by Megan Duffy on dynamicecology) Script files perform a record of your work so you can remember what you did re-run it to check things re-use your code for new analyses track down errors (which will happen!) share with collaborators Script files are not unique to R, but the R community seems to have built up a particularly good infrasture for their implemenation and ethos encouraging their use. Megan Duffey at Dynamic Ecology has an excellent post on this. When you first start out learning R most of your scripts will be disposable. Quickly you’ll want to start keeping track of the code you write in class to refer back to. When you start doing analyses you’ll want to write comments as you go, and provide details at the top of your file so you can quickly get up to speed when you come back to the file. 4.3.1 What to include in a script A good R script should be a self-sufficient document that your future self can easily make sense of, or better yet, someone starting from scratch can understand. Depending on the exact purpose, things to include might be A general title, such as “R Script: data exploration &amp;t-test for analaysis of frog arm girth” Who wrote it and their contact info When the script was created when it was most recently accessed or created What data it uses and where it comes from What project or paper it relates to A challenge when writing and maintaining R scripts is that you are often actively engaged in learnign R, learning stats, and learning about or exploring your data. So you write a lot of code then erase it, or scratch out code in a script and then move on. While I have written and saved many scripts that I have never re-opened, I have never re-opened a script and said “wow, I went WAY overboard annotating this thing!” ALso, commenting code makes it much easier to read; I often add fairly simple comments to make code easier navigate and to break things up into smaller chunks. So, at a minimum I think every script should Have some kind of header saying what it is and when it was made Have one line of comments or annotations for every 3 to 5 lines of code. 4.3.2 Formatting sections in R scripts To make scripts easier to navigate its useful to strong together the comment character “#” to make dividers and boxes. This is very good practice to make code more readable. It can be a bit tedious at times to do this; one advantage of rmarkdown, which we’ll introduce at the end of this chapter and go into further in the next, is that it makes it very easy to format section titles. 4.3.3 A sample R script On the following page are examples of R scripts for a formal analysis of a dataset. First I’ll show what the script might look like as I write it. Then I’ll show how I’ll fix it up once I know its something I am going to look back at in the fugure ### R Script: Analysis of frog arm girth ## Nathan Brouwer (brouwern@gmail.com) ## 6/6/2018 ## update: 8/17/2018 ## I am re-running analysis from paper by Buzatto et al 2015 ## I want to compare the results of a t-test with ## and w/o Welche&#39;s correction for unequal variation ## Packages library(wildlifeR) ## Data set up # load frogarm data from Buzatto et al 2015 data(&quot;frogarms&quot;) ## Data visualization # histogram of all data hist(frogarms$sv.length) ## Data analysis # unpaired t-test NOT using Welch&#39;s correction ## NOTE: assumes variation within each group EQUAL t.test(sv.length ~ sex, # model formula var.equal = TRUE, # set variances to equal data = frogarms) # data # unpaired t-test &gt;&gt;using&lt;&lt; Welch&#39;s correctin t.test(sv.length ~ sex, var.equal = FALSE, # set variances to be unequal data = frogarms) A polished R script ########################################### ### ### R Script: Analysis of frog arm girth ### ########################################### ## Author: Nathan Brouwer (brouwern@gmail.com) ## Creation: 6/6/2018 ## Last update: 8/17/2018 ############### ## Introduction ############### # This script is an analysis of frog body size and arm girth ## I am re-running analysis from paper by Buzatto et al 2015 ## I want to compare the results of a t-test with ## and w/o Welche&#39;s correction for unequal variation # Data were originally from # Buzatto et al 2015. Sperm competition and the evolution of # precopulatory weapons: Increasing male density promotes # sperm competition and reduces selection on arm strength in # a chorusing frog. Evolution 69: 2613-2624. # https://doi.org/10.1111/evo.12766 # Data originally downloaded on 6/6/2018 from # https://figshare.com/articles/Data_Paper_Data_Paper/3554424 # Data are included in the wildlifeR package and load from it # https://github.com/brouwern/wildlifeR ############### ## Packages ############### library(wildlifeR) ############### ## Data set up ############### # load frogarm data from Buzatto et al 2015 data(&quot;frogarms&quot;) ###################### ## Data visualization ###################### # histogram of all data hist(frogarms$sv.length) ###################### ## Data analysis ###################### # unpaired t-test NOT using Welch&#39;s correction ## NOTE: assumes variation within each group EQUAL t.test(sv.length ~ sex, # model formula var.equal = TRUE, # set variances to equal data = frogarms) # data # unpaired t-test &gt;&gt;using&lt;&lt; Welch&#39;s correctin t.test(sv.length ~ sex, var.equal = FALSE, # set variances to be unequal data = frogarms) For more on organizing scripts see points 4 and 5 of “Eight things I do to make my open research more findable and understandable” at (DataColada](http://datacolada.org/69). 4.4 RMarkdown File New File R Markdown A pop up menu will appear with lots of options; just click “ok.” "],
["rmarkdown-1.html", "Chapter 5 RMarkdown 5.1 The “YAML” Header 5.2 Word processing 5.3 Code “chunks”", " Chapter 5 RMarkdown 5.1 The “YAML” Header 5.2 Word processing 5.3 Code “chunks” Most data starts off as a spreadsheet before it enters R. Loading spreadsheet data into R will be our end goal, but as a run up will step through several easier tasks that will highlight the core principles of getting data into R, in particular loading additional software into R (called packages) and loading the data in those packages into R. We’ll also load data directly from the internet into R. The chapters in this section are cover the following: Loading R packages to get new software into R Loading and looking at data from R packages Loading packages from the software repository GitHub Loading data from the internet Loading spreadsheets as .csv files Loading Excel spreadsheets "],
["loading-packages-from-cran.html", "Chapter 6 Loading packages from CRAN 6.1 Introduction 6.2 Loading packages that come with base R 6.3 Load data from an external R package 6.4 [ ] Downloading packages using RStudio 6.5 [ ] Packages &amp; their dependencies 6.6 Challenge", " Chapter 6 Loading packages from CRAN Nathan Brouwer, Phd brouwern@gmail.com https://github.com/brouwern (???) 6.1 Introduction When you install R you get base R, which is the core set of functions, functionality, and some data sets. Base R however is surrounded by a universe of extensions built by statistician, programmers, academics and businesses that use R for analyses. A lot of R’s functionality is found in these packages, including data sets, special plotting functions, and statistical tools for the analysis of complex data. Some of these are fairly standard and are downloaded along with base R and just need to be explicitly installed. Other have to be downloaded from the internet and installed. Most packages contain data in order to demonstrate what they do; working with data from packages will be covered in a later lesson. This book relies heavily on an R package I’ve written called “wildlifeR” (https://brouwern.github.io/wildlifeR/) that contains the datasets used throughout the book, as well as some helpful R functions I’ve written. Most R packages you’ll use are stored on the CRAN website where you download R (https://cran.r-project.org/). R and RStudio have functions and tools for downloading and managing packages that we’ll briefly introduce in this exercise. Another place a package can be stored online is a code repository like GitHub. the wildlifeR package lives on GitHub and can be downloaded directly from there. Many packages on CRAN also occur on GitHub, especially if programmers are actively developing, updating, and managing the package. We’ll cover downloading packages from GitHub in the next exercise. 6.1.1 Learning objectives This exercise will introduce students to the concept of an R Package (aka library) how to load R packages using the library() function the R plotting package ggplot2 cool add-ons to ggplot2, ggpubr and cowplot 6.1.2 Learning goals By the end of this exercise students should be able to * locate and download packages from the CRAN website using RStudio * recognize the R functions used to download and install packages. * 6.1.3 Functions &amp; Arguements install.packages dependencies = TRUE library 6.1.4 Packages MASS ggplot2 ggpubr cowplot 6.1.5 Potential hangups quoted vs. unquoted text (eg qplot vs. ggpubr syntax) 6.2 Loading packages that come with base R What you download from CRAN is base R. Many functions are called base functions because they are hard-wired into R. OPTIONAL: What functions come with base R? &gt; If for some reason you want to see all the functions that come with base R, type this into the console and press enter. (ls stands for “list” and is a function we’ll use more later). ls(&quot;package:base&quot;) As R has been developed there has also built up a cannon of tried and true packages that are downloaded automatically when you download R, but they aren’t brought into R’s working memory unless you tell R. OPTIONAL: What packages come with base R? If you want to see all of the packages that come with base R, do this. library() is a function you will use a lot. .libPaths(&quot;&quot;) library() On package that is part of this cannon is MASS, which stands for Modern Applied Statistics in S. “S” is the precursor to R, and MASS is the package that accompanies the book of the same name, which is one of the original books on S/R. (https://www.springer.com/us/book/9780387954578) 6.2.1 [ ] Loading packages with the library() function When a function is already downloaded to your computer, you explicitly load it into R’s working memory using the library() command. library(MASS) 6.2.2 Preview: loading data from packages Many packages have data. We can load data using the data() command. data(crabs) We plot data with the plot() command. plot(FL ~ RW, data = crabs) 6.3 Load data from an external R package Many packages have to be explicitly downloaded and installed in order to use their functions and datasets. Note that this is a two-step process: 1. Download package from internet 1. Explicitly tell R to load it 6.3.1 [ ] Step 1: Downloading packages with install.packages() There are a number of ways to download packages. One of the easiest is to use the function install.packages(). Note that it might be better to call this “download.packages” since after you install it, you also have to load it! Frequently in this book I will include install.packages(…) at the beginning of a lesson the first time we use a package to make sure the package is downloaded. Note, however, that if you already have downloaded the package, running install.packages(…) will download a new copy. We’ll download a package used for plotting called ggplot2, which stands for “Grammar of Graphics.” install.packages(&quot;ggplot2&quot;) Often when you download a package you’ll see a fair bit of red text, and sometime other things will pop up. Usually there’s nothing of interest here, but sometimes you need to read things carefully over it for hints about why something didn’t work. OPTIONAL:Seeing all of your installed packages If for some reason you want to see everything you’ve downloaded, do this. installed.packages() 6.3.2 [ ] Step 2: Explicitly loading a package with library() The install.packages() functions just saves the package software to R; now you need to tell R “I want to work with the package”. This is done using the library() function. (Its called library because another name for packages is libraries) library(ggplot2) OPTIONAL: making a plot with ggplot Now we can make a plot with ggplot, like using te qplot() function. (Note that the syntax is different than what we did above with plot() ). qplot(y=FL,x= RW, data = crabs) 6.4 [ ] Downloading packages using RStudio RStudio has a point-and-click interface to download packages. In the pane that says “Files, Plots, Packages, Help, Viewer” click on “Packages”. When the panel shift below “Packages” it will say “Install, Update, Packrat.” Click on “Install.” (There might be a lag during this process as RStudio get info about your packages). In the pop up widow there will be a middle field “Packages” where you can type the name of your package. There’s an auto-complete feature to help you in case you forget the name. Then click “install.” Note that in the bottom right corner of the pop up is a checked box next to “Install dependencies.” Leave that checked; more on that later. 6.5 [ ] Packages &amp; their dependencies R packages frequently use other R packages (which frequently use other R packages…). When an R package requires another package, its called a dependency. Depending on who and how the package was written up, dependencies might not be an issue or could be a problem. As noted above when you download packages using RStudio’s point and click interface there’s a box that should be checked called “Install dependencies.” If you are using install.packages() there is an extra argument “dependencies = TRUE” that elicits the same behavior. I’ll use this to get an add-on for ggplot2 called ggpubr. install.packages(&quot;ggpubr&quot;,dependencies = TRUE) We can then install this library(ggpubr) Optional:Make a plot with ggpubr/ ggpubr is an add on to ggplot. (This means that ggpubr has ggplot as a dependency). Note that the syntax for ggpubr function we use, ggscatter(), has a different syntax (again) than ggplot’s qplot() function and base R’s plot() function. ggscatter(data = crabs,y = &quot;FL&quot;, x = &quot;RW&quot;) # use quotes! 6.6 Challenge An another add on to ggplot2 is cowplot, which stands for “Claus O. Wilke Plot”. Download cowplot from CRAN using either the point-and-click method or install.packages, and then load it using library. Then run the following R code, which should make the plot below. Note that “FL” and “RW” are NOT in quotation marks as they are for ggscatter()! qplot(data = crabs, y = FL, x = RW) #no quotes! "],
["loading-data-into-r-from-a-package.html", "Chapter 7 Loading data into R from a package 7.1 Introduction 7.2 Data pre-loaded in R 7.3 Loading data from R packages 7.4 Learning about data in R 7.5 Load data from an external R package 7.6 Loading data from an R script", " Chapter 7 Loading data into R from a package Nathan Brouwer, Phd brouwern@gmail.com https://github.com/brouwern 7.1 Introduction Working in R is all about working with data. There are many ways to get data into R, and RStudio has some helpful tools for this process. In this exercise we’ll go over the common ways that data get’s brought into R and how to download external packages to get datasets and functions. These include data pre-loaded in R loaded in R “packages” typed into a script loaded from a spreadsheet using RStudio’s data import tools loaded from a spreadsheet using just R code While discussing these various routes for data to get into R we’ll also talk a bit about how R works with data and learn data related vocab. 7.1.1 Functions head(), tail() summary() 7.1.2 Datsets datasets::iris 7.1.3 Packages 7.1.4 Key terms package dataframe 7.2 Data pre-loaded in R R comes with a number of datasets ready to use. A famous dataset frequently used in statistics is a set of measurements made on three species of irises and used to demonstrate some statistical principles by geneticist and statistician R.A. Fisher. We can put the iris dataset into R’s working memory using the data() command data(iris) We can see these data simply by type the word “iris” in the console and pressing enter. The dataset is too big for the screen probably and you’ll just see a bunch of numbers flash by. You can get just a glimpse of the data by using the head() command, which will show you the first six or so rows of data. head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa (You can all use the tail() command to see the last 6 rows if you want.) We can see that there are five rows of data. Three contain information about the length and width of the parts of the flower (Sepals and Petals) and the last holds the names of the species. We can get a sense for these numbers by using the summary() command on the data, which will give us the mean and other summary statistics summary(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## Note that the last column doesn’t contain numbers but rather names, so R counts up how many of each species name there is. If we want to be reminded of the names of each column we can use the names() function names(iris) ## [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; ## [5] &quot;Species&quot; Looking at R data in the console isn’t always very easy, so one thing you can do is use the View() command. This will bring up the data in a spreadsheet like viewer as a new tab in the script editor, similar to this. pander::pander(iris[1:10,]) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa Note, however, that unlike a spreadsheet you cannot edit the data. If you want to know more about a package, you can look at its help file, eg “?iris.” These will often give you a fair bit of detail about what each column means, where the data are from, and may even have examples R functions applied to the data (though these can be rather obtuse, as is the case for the iris data). 7.2.1 Preview: Plotting boxplots Plotting will be covered in depth in a subsequent exercise, but here’s a glimpse of how we plot things in R: plot(Petal.Length ~ Species, data = iris) This code creates a series of boxplots of the petal lengths of each species of flower. 7.3 Loading data from R packages Base R however is surrounded by a universe of extensions built by statistician, programmers, academics and businesses that use R for analyses. Some of these are fairly standard and are downloaded along with base R and just need to be explicitly installed. Other have to be downloaded from the internet and installed. Most packages contain data in order to demonstrate what they do. 7.3.1 Loading a package contained in base R One package that is automatically downloaded but not automatically installed with base R is the “MASS” package, which stands for “Modern Applied Statistics in R”; S is the software that preceded R. We can install this package and make it functionally using the library() command library(MASS) The MASS package has a biological dataset called “crabs” that you can put into working memory using data(crabs). We can then look at it using head(),View(), tail(), summary(), etc. We can find out more about the dataset using the help file, accessed via ?crabs Question 1.What does the “FL” column mean in the crabs dataset? 1.What is the mean of the FL column? 7.3.2 Preview: Plotting scatter plot We can plot the relationship between the FL and RW variables using a scatter plot. plot(FL ~ RW, data = crabs) 7.4 Learning about data in R When data is being worked with in R, it lives in a place called the workspace. The workspace is not immediately transparent to you while working in R. It lives behind the scenes in what is essentially R’s working memory. We can see what’s on R’s mind using the ls() command ls() ## [1] &quot;crabs&quot; &quot;iris&quot; &quot;x&quot; We can see our two datasets that we loaded using the data() command. We can add new things to the work space using an R command like this my.mean &lt;- mean(c(1,2,2)) Where “&lt;-” is called the assignment operator. This function assigns the output of an R command or R function to an R object in R’s working memory, the workspace. We can check again what’s on R’s mind using a command ls(), which stands for “list” ls() ## [1] &quot;crabs&quot; &quot;iris&quot; &quot;my.mean&quot; &quot;x&quot; We can see that we added my.mean. We can see what my.mean is by typing its name in to the console my.mean ## [1] 1.666667 We can also learn more about is using the is() command is(my.mean) ## [1] &quot;numeric&quot; &quot;vector&quot; Here we get a big of R lingo: R tells use “numeric”, which means it contain numeric data (numbers), and “vector”, which is one of several types of R object R objects can be just about anything. We can assign letter to an R object like this my.abc &lt;- c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;) Note that we have the letter each surrounded by quotes, and all 3 of them within c(…) If you call up “my.abc” from the console, you will get back the three letter. Now see what is(my.abc) says is(my.abc) ## [1] &quot;character&quot; &quot;vector&quot; &quot;data.frameRowLabels&quot; ## [4] &quot;SuperClassMethod&quot; There’s a lot that comes out, but the first one says “character”, indicating that yo have character data - data made up of text. If you type ls() again what happens? ls() ## [1] &quot;crabs&quot; &quot;iris&quot; &quot;my.abc&quot; &quot;my.mean&quot; &quot;x&quot; We now see both of our R objects and the two datasets. If we call is() on one of the dataset what do we is? is(crabs) ## [1] &quot;data.frame&quot; &quot;list&quot; &quot;oldClass&quot; &quot;vector&quot; Several things get spit out, but the first one is important: “data.frame” Dataframes are fundamental units of analysis in R. Most of the data you will load into R and work within R will be in a dataframe. Another function that tells about something in the the workspace is str(), which stands for structure. It provides info about what types of variables are in each column, and provides some sample output similar to head(), but oriented differently. str(crabs) ## &#39;data.frame&#39;: 200 obs. of 8 variables: ## $ sp : Factor w/ 2 levels &quot;B&quot;,&quot;O&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ sex : Factor w/ 2 levels &quot;F&quot;,&quot;M&quot;: 2 2 2 2 2 2 2 2 2 2 ... ## $ index: int 1 2 3 4 5 6 7 8 9 10 ... ## $ FL : num 8.1 8.8 9.2 9.6 9.8 10.8 11.1 11.6 11.8 11.8 ... ## $ RW : num 6.7 7.7 7.8 7.9 8 9 9.9 9.1 9.6 10.5 ... ## $ CL : num 16.1 18.1 19 20.1 20.3 23 23.8 24.5 24.2 25.2 ... ## $ CW : num 19 20.8 22.4 23.1 23 26.5 27.1 28.4 27.8 29.3 ... ## $ BD : num 7 7.4 7.7 8.2 8.2 9.8 9.8 10.4 9.7 10.3 ... Note that the variables “sp”, which stands for “Species”, and “sex” are followed by the word “Factor.” A factor variable is something that is or is summarized as discrete categories. For the species factor, there are two levels: the “B” species and the “O” species. 7.5 Load data from an external R package Many packages have to be explicitly downloaded and installed in order to use their functions and datasets. Note that this is a two step process: 1. Download package from internet 1. Explicitly tell R to load it 7.5.1 Step 1: Downloading packages There are a number of ways to install packages. One of the easiest is to use install.packages(). Note that it might be better to call this “download.packages” since after you install it, you also have to load it! Well download a package used for plotting called ggplot2, which stands for “Grammar of graphics” install.packages(&quot;ggplot2&quot;) Often when you download a package you’ll see a fair bit of red text. Usually there’s nothing of interest hear, but sometimes you need to read over it for hints about why something didn’t work. 7.5.2 Step 2: Explicitly loading a package The install.packages() functions just saves the package software to R; now you need to tell R “I want to work with the package”. This is done using the library() function. (Its called library because another name for packages is libraries) library(ggplot2) ggplot2 has a dataset called “msleep” which has information on the relationship between the typical size of a species and its brain weight, among other things We load the data actively into R’s memory using data(), and can look at the column names using names() data(msleep) names(msleep) ## [1] &quot;name&quot; &quot;genus&quot; &quot;vore&quot; &quot;order&quot; ## [5] &quot;conservation&quot; &quot;sleep_total&quot; &quot;sleep_rem&quot; &quot;sleep_cycle&quot; ## [9] &quot;awake&quot; &quot;brainwt&quot; &quot;bodywt&quot; We can now explore this data set as before using summary(), str(), etc. Another useful command when you are working with a new dataset is dim(). This tells you the dimension of the dataframe dim(msleep) ## [1] 83 11 7.5.3 Preview: plotting with ggplot2 ggplot2 is a powerful plotting tool that has become standard among scientists, data scientists, and even journalists. Here’s a quick way to make a plot in ggplot2 using its qplot() function (qplot = quick plot, not to be confused with qqplot). Note that the qplot() function only works if you have ggplot2 downloaded and installed. A powerful aspect of ggplot is the fact that it can easily be used to modify plots. Here, we use the arguement “color =” to color code the data points based on their IUCN red list status. qplot(y = brainwt, x = bodywt, data = msleep, color = conservation) ## Warning: Removed 27 rows containing missing values (geom_point). The animals in this data vary in size from mice to elephants and so a lot of the data points are scrunched together. A trick to make this easier to see is to take the log of the brainwt and bodywt variable. In R, we can do this on the fly like this using the log() command qplot(y = log(brainwt), x = log(bodywt), data = msleep, color = conservation) ## Warning: Removed 27 rows containing missing values (geom_point). 7.6 Loading data from an R script So far we have only looked at dataset that are already formatted into dataframe by somebody for us. Now we want to look at how to set up datasets ourselves. When datasets are small its possible to enter them more or less directly into R by typing out all of the numbers in a script. This only works well for when datasets are small; even when datasets are small its best to keep them separate from your R code in a spreadsheet file. However, its useful to know how to load data this way; even when an exercise in this book loads data from a package or spreadsheet I will also often include the code to load it directly just in case there is an issue with download the package or file. 7.6.1 The eagles have landed - in your R workspace In a subsequent exercise we will practice using data on the number of eagles in Pennsylvania and other states in the USA. We can load this data into R by making R objects, and then turning these objects into a dataframe. 7.6.1.1 Step one: Build R objects First, we’ll use the assignment operator (“&lt;-”) to create an R object called “year” that lists the years from 1980 through 2015 for which the number breeding pairs of eagles in Pennsylvania, USA, is known. year &lt;- c(1980,1981,1982,1983,1984,1985,1986,1987,1988,1989, 1990,1991,1992,1993,1994,1995,1996,1997,1998,1999, 2000,2001,2002,2003,2004,2005,2006,2007,2008,2009, 2010,2011,2012,2013,2014,2015,2016) A quick trick to do this much fast is year &lt;- c(1980:2016) Second, we’ll create an object called “eagles” with the number of breeding pairs (male and females paired up for making baby eagles) recorded each year. Note that most years in the 1980s are skipped because there is not data available. When data are missing we use NA. (Note that this is just NA, with not quotes around it). eagles &lt;- c(3, NA, NA, NA, NA, NA, NA,NA,NA,NA, 7, 9, 15, 17, 19, 20, 20,23,29,43, 51,55, 64, 69, NA, 96,100,NA,NA,NA, NA,NA, NA, NA,252,277, NA) 7.6.1.2 Step two: Build dataframe We can then turn these two separate R objects into a dataframe eagle.df &lt;-data.frame(year, eagles) 7.6.2 Looking at the eagle data We can check that we have this R object by using the ls() command. ls() ## [1] &quot;crabs&quot; &quot;eagle.df&quot; &quot;eagles&quot; &quot;iris&quot; &quot;msleep&quot; &quot;my.abc&quot; ## [7] &quot;my.mean&quot; &quot;x&quot; &quot;year&quot; And we can confirm that its a dataframe using is() is(eagle.df) ## [1] &quot;data.frame&quot; &quot;list&quot; &quot;oldClass&quot; &quot;vector&quot; summary() will give us basic info on PA’s eagles summary(eagle.df) ## year eagles ## Min. :1980 Min. : 3.00 ## 1st Qu.:1989 1st Qu.: 18.00 ## Median :1998 Median : 29.00 ## Mean :1998 Mean : 61.53 ## 3rd Qu.:2007 3rd Qu.: 66.50 ## Max. :2016 Max. :277.00 ## NA&#39;s :18 Note that in the “eagles” columns it tells you the number of NAs (missing values). The summary() readout quickly tells us that the eagle population has changed dramatically. 7.6.2.1 Preview: plotting the eagle data We can plot the data in ggplot2 using qplot(). However, there is an excellent package that adds additional functionality to ggplot called ggpubr. This is fairly common in R: you have packages that add functions to R, and packages that add functions to other packages. We can install ggpubr using install.packages(). Note that the name of the package, ggpubr, is in quotes. install.packages(&quot;ggpubr&quot;) ggpubr requires another package, magrittr, which R tells you about in read text. When a package requires another package, its called a dependency because one package relies on another. ggpubr has magrittr as a dependency; ggpubr modifies ggplot2, so ggpubr has ggplot2 as a dependency. Occasionally you might try to load a package and it won’t automatically install or download the dependency, usually because its not yet downloaded. If this happens with magrittr we would just have to download it using “install.packages(”magrittr“)”. Once we have ggpubr loaded we can plot the eagle data using the handy function #ggscatter is not working for some reason ##ggscatter(eagle.df,eagles, year) qplot(y = eagles, x = year, data = eagle.df) "],
["loading-packages-data-from-github.html", "Chapter 8 Loading packages &amp; data from GitHub 8.1 Introduction 8.2 [ ] Accessing GitHub using devtools 8.3 [ ] Downloading the wildlifeR package with install_github() 8.4 [ ] The wildlifeR packge webiste", " Chapter 8 Loading packages &amp; data from GitHub Nathan Brouwer, Phd brouwern@gmail.com https://github.com/brouwern (???) 8.1 Introduction GitHub is an online platform for hosting and sharing code. More formally it is called a software repository. It is very popular with software developers, especially those creating open-source applications, and has also been adopted whole-hearted by many data scientists and data analysts. GitHub has many features and uses. One of the most basic ones is to use GitHub like Dropbox to R backup copies of code on GitHub. GitHub also can act like a kind of web server to host websites, online books like this one, and provide access to open source software. Many people working on R packages use GitHub to host their package while its being developed or expanded. When a package is finished, it often is then submitted to CRAN, and the version on GitHub is used as the developement version where new features are being developed and tested. You can access packages on GitHub to get the newest version before something has been submitted to CRAN, or packages that haven’t or maybe will never end up on CRAN. This book relies on a package I’ve written called wildlifeR for datasets and some functions. In this short exercise we’ll download a package from CRAN we need to interact with GitHub, and then download wildlifeR. We’ll also go to the wildlifeR website to learn more about the package. 8.1.1 Learning objectives 8.1.2 Learning goals 8.1.3 Functions &amp; Arguements library devtools::install_github scatter.smooth $ 8.1.4 Packages devtools wildlifeR 8.1.5 Potential hangups We’ll use the “$” operator to tell scatter.smooth() what to plot, which is different than how ggpubr and ggplot2 work; sigh… 8.2 [ ] Accessing GitHub using devtools The devtools package is used by many people who write R packages and includes a function for downloading from GitHub install.packages(&quot;devtools&quot;, dependencies = TRUE) # [ ] devtools has a lot of dependencies so this might take a while. Once everything is downloaded, load the package explicitly with library() library(devtools) 8.3 [ ] Downloading the wildlifeR package with install_github() My github site is at https://github.com/brouwern and the code for wildlifeR is https://github.com/brouwern/wildlifeR. You can access the files directly if you want, but that isn’t necessary. We can download the package just like it was on CRAN using install_github(). You’ll probably see some red text and a LOT of black text as install_github() talks with GitHub. install_github(&quot;brouwern/wildlifeR&quot;) Now we can put it all explicitly into memory library(wildlifeR) # [ ] OPTIONAL: Accessing data from wildlifeR One of the datasets in wildlifeR is called “eggs.” It has data from a paper by Stoddard et al. (2017) in Science called [Avian egg shape: Form, function, and evolution.] (http://science.sciencemag.org/content/356/6344/1249). We can plot the relationship between egg asymmetry and ellipticity using the base R function scatter.smooth(), which draws a type of regression line through the data for us (Note that the syntax for scatter.smooth() is, sadly, different than plot() and other plotting functions…). scatter.smooth(eggs$asymmetry, eggs$ellipticity) 8.4 [ ] The wildlifeR packge webiste Some packages have websites that summarize the package contents. If you visit https://brouwern.github.io/wildlifeR/ you can find out information on each dataset and function under the “Reference” tab, and see how the datasets and functions are used under the “Articles” tab. "],
["loading-data-from-the-internet.html", "Chapter 9 Loading data from the internet", " Chapter 9 Loading data from the internet Nathan Brouwer, Phd brouwern@gmail.com https://github.com/brouwern (???) "],
["introduction-3.html", "Chapter 10 Introduction 10.1 [ ] Downloading a .csv file using getURL()", " Chapter 10 Introduction Its possible to download data directly from the internet, including Spreadsheets directly posted online as .csv or .txt Spreadsheets contained within a GitHub repository, including a package Google Sheets and many other formats In this short exercise we’ll download some data that is stored as a raw .csv file within the inner workings of the widlifeR package. 10.0.1 Learning objectives 10.0.2 Learning goals 10.0.3 Functions &amp; Arguements RCurl::getURL() scatter.smooth 10.0.4 Packages RCurl install.packages() 10.0.5 Potential hangups 10.1 [ ] Downloading a .csv file using getURL() The package RCurl provides functions for accessing online material. First we need the package install.packages(RCurl, dependencies = TRUE) # [ ] As always, once we install a package we need to really install it with library(). (You might see some red text as RCurl loads up some of its dependencies) library(RCurl) # [ ] We then use the getURL() to prep the info we need for downloading that .csv we want. The file we want is “eaglesWV.csv”. It is located at this rather long URL: https://raw.githubusercontent.com/brouwern/wildlifeR/master/inst/extdata/eaglesWV.csv First, we’ll use the “&lt;-” assignment operator to store the shortened URL in an R object. Be sure to put the URL in quotes. eaglesWV.url &lt;- &quot;https://raw.githubusercontent.com/brouwern/wildlifeR/master/inst/extdata/eaglesWV.csv&quot; # [ ] Next we’ll use the getURL() function to set things up, storing the info in a new object “eaglesWV.url_2” (note the “_2&quot; on the end) eaglesWV.url_2 &lt;- getURL(eaglesWV.url) eaglesWV_2 &lt;- read.csv(text = eaglesWV.url_2) We can preview the downloaded dataset using summary() or any other command we want summary(eaglesWV_2) ## year WV ## Min. :1980 Min. : 0.000 ## 1st Qu.:1994 1st Qu.: 4.000 ## Median :2001 Median : 5.000 ## Mean :2001 Mean : 6.882 ## 3rd Qu.:2008 3rd Qu.:10.000 ## Max. :2015 Max. :19.000 ## NA&#39;s :12 OPTIONAL: Plotting West Virginia Eagle Data Thankfully, eagles having been increasing exponentially in West Virginia since the 1980s. scatter.smooth(y = eaglesWV_2$WV,x = eaglesWV_2$year) "],
["loading-data-from-csv-files-into-rstudio.html", "Chapter 11 Loading data from .csv files into RStudio 11.1 Introduction 11.2 Preliminary step: download a .csv file 11.3 Set the “working directory” (“WD”) in RStudio 11.4 Check the working directory with getwd() 11.5 Check for the file you downloaded with list.files() 11.6 Loading data into R using read.csv() 11.7 Loading .csv files using RStudio [ ] 11.8 Challenge", " Chapter 11 Loading data from .csv files into RStudio Nathan Brouwer, Phd brouwern@gmail.com https://github.com/brouwern (???) 11.1 Introduction We will be working with data from Table 2 of Medley and Clements (1998). (This data is featured in the ecological stats book by Quinn and Keough (2002), though I’m not a fan of how they analyse it.) The paper looks at how diatoms(photosynthesizing microorganisms known for their silica shells) are impacted by water quality in mountain streams. 11.1.1 Learning goals 11.1.2 Learning objectives By the end of this lesson students will be able to Download raw data files by hand from the internet Load .csv files using the R command read.csv() Load .csv files using RStudio’s point-and-click interface 11.1.3 R packageas 11.1.4 R commands read.csv View setwd getwd list.files read.csv ls dim names summary 11.1.5 Files Medley1998.csv 11.1.6 Potential Hangups 11.1.7 References Medley &amp; Clements. 1998. Responses of diatom communities to heavy metals in streams: The influence of longitudinal variation. [Ecological Applications 8:631-644.] (https://www.jstor.org/stable/2641255) Quinn &amp; Keough. 2002. Experimental design and data analysis for biologists.. A pdf version of the book is available online for free.. 11.2 Preliminary step: download a .csv file To load a .csv file into R we first need a .csv file to load. The data we’ll be working with can be downloaded from GitHub. First, go to the following link (it happens to be an obscure subfolder of the wildlifeR package) https://github.com/brouwern/wildlifeR/tree/master/inst/extdata Next, locate the file Medley1998.csv Figure 11.1: A list of files stored on GitHub. Click on it; a table will show up. Figure 11.2: An HTML .csv datafile store on GitHub. The raw file can be accessed by clicking on the Raw tab. This table is formatted to look nice on a webpage (using some HTML that GitHub impose on the file). We want the raw file itself. To get it we need to click on the “Raw” tab. Figure 11.3: A raw .csv datafile stored on GitHub. It can be downloaded By using Crtl+S or right clicking and selecting Save As We will then see what looks like a text document against a white background with no formatting of any kind. We can now download the file by following these steps. Either Use the shortcut Control + S to “Save as” the file Or Right click (on Mac:…) “Save link as” (or the equivalent) Then save the file to a location you know you can find, such as Documents Desktop Your network profile drive Note that if you try to “Save as…” anything else but the white-screen raw text file you will run into problems. After you download the file, open up Excel or another spreadsheet program and open up the file to confirm that what you downloaded is just a set of numbers. I you see long lines of text you might have accidentally downloaded the HTML-formatted version of the file. Make sure you are downloading the very plain version of the file from the totally blank white screen. 11.3 Set the “working directory” (“WD”) in RStudio We will now take the data we saved as a .csv file and load it into R. This can be tricky. First we need to tell R exactly where the file is by setting the working directory. Follow these steps: Click on “Session” on the main menu on the menu: “File, Edit, Code, View, Plots, Session, …” Click on “Set working directory” Select “Choose Directory” Select your computer’s Documents folder or wherever else you chose to save the file. Select the directory &amp; click “Open” Note that the command “setwd()” shows up in the console followed by the location of the directory you selected You can set your working directory to be anywhere on the computer. It is essential to make sure that the csv file you want to load into R is in your working directory. Depending on the location you chose you might just see “~/” or some other shorthand. 11.4 Check the working directory with getwd() You can confirm where you are at using the command getwd(); this can be handy if you’re not sure that you did things correctly or if R didn’t output what you expected. getwd() # [ ] ## [1] &quot;C:/Users/lisanjie/Documents/1_R/git/git-teaching/teaching_2018_2019/2018_fall/biostats_fall_2018/4_biostats_bks_pkg/EDS/EDSbook&quot; Here, even though when set the working directory R originally just displayed “setwd(”~/“)”, I can now confirm that I’m in my documents folder. 11.5 Check for the file you downloaded with list.files() You can see what’s in your working directory using the command list.files(). Depending on how many files you have this could be a very long list. I have 40-ish files and so won’t display them. list.files() # [ ] If you have a ton of files being printed out you can narrow things down by telling R a text pattern to screen for. list.files(pattern = &quot;csv&quot;) # [ ] ## character(0) If the file wasn’t successful downloaded R will just give you a cryptic message like this. ## character(0) This means the file isn’t’ there and you need to redo the download to make sure either i)the file actually downloaded and ii)file is saved where you want it to be. What we want to see is this ## character(0) OPTIONAL:Interacting with R via the console or the source viewer You can enter R commands directly into the console, or type them into a script file in the source viewer and then execute. If you’ve just been using the console try this: Click on the source viewer pane in RStudio Type “getwd()” in the source viewer Click on the “Run” button in the upper Right part of the pane The getwd() command is sent over to the console and executed 11.6 Loading data into R using read.csv() Copy and paste the .csv file name from the console into the source viewer then Execute the command “read.csv(file =”Medley1998.csv“)”. You can type it but you must be careful to have NO TYPOS. R is unforgiving when it comes to typos. If you’ve done it correctly you’ll see the data table printed out in the console (I show only some of the output). read.csv(file = &quot;Medley1998.csv&quot;) ## station pH DO cond temp alk hard ZN spp.rich spp.div prop.Achnanthes ## 1 ERI 8.5 8.4 180 11 119 122 2 35.3 2.27 0.37 ## 2 ER2 8.0 8.0 145 14 52 84 407 21.7 1.25 0.48 ## 3 ER3 8.0 8.0 150 15 54 86 336 20.7 1.15 0.35 ## 4 ER4 8.8 7.8 240 18 77 126 104 16.7 1.62 0.02 ## 5 FC1 7.8 8.6 55 9 30 42 7 19.0 1.70 0.17 ## 6 FC2 7.4 8.8 130 8 41 84 1735 5.7 0.63 0.76 You must have the file name in quotation marks and include the “.csv”. Any small error will cause things to not work. Here are examples of mistakes that won’t work (no matter how much you cuss at it.) read.csv(file = Medley1998.csv) #missing quotes &quot; &quot; read.csv(file = &quot;Medley1998.csv&quot;) #missing .csv read.csv(file &quot;Medley1998.csv&quot;) #missing = Note that R returns error messages in red, but they aren’t necessarily very helpful in figuring out what the problem actually is. This is an unfortunate feature of R, and reading error messages is a skill that must be learned. 11.6.1 Load data into an R “object” Now type this: “med98 &lt;- read.csv(file =”Medley1998.csv“)”. The “&lt;-” is the assignment operator. What happens when you execute this command? med98 &lt;- read.csv(file = &quot;Medley1998.csv&quot;) [ ] It might actually look like not much has happened. But that’s good! It means the data has successful been loaded into R. You have “assigned” the data from your file to the “object” named “med98” 11.6.2 The assignment operator “&lt;-” “&lt;-” is called the “assignment operator”. It is a special type of R command. “&lt;” usually shares The comma key. Type “shift + ,” To get it. If you type just “med98” and execute it as a command, what happens? med98 ## station pH DO cond temp alk hard ZN spp.rich spp.div prop.Achnanthes ## 1 ERI 8.5 8.4 180 11 119 122 2 35.3 2.27 0.37 ## 2 ER2 8.0 8.0 145 14 52 84 407 21.7 1.25 0.48 ## 3 ER3 8.0 8.0 150 15 54 86 336 20.7 1.15 0.35 ## 4 ER4 8.8 7.8 240 18 77 126 104 16.7 1.62 0.02 ## 5 FC1 7.8 8.6 55 9 30 42 7 19.0 1.70 0.17 ## 6 FC2 7.4 8.8 130 8 41 84 1735 5.7 0.63 0.76 You should see the entire dataset spit out in the console (I’ve just shown the top part). Now execute the list command ls(). You should now see “med98” shown in the console. ls() ## [1] &quot;crabs&quot; &quot;eagle.df&quot; &quot;eagles&quot; &quot;eaglesWV.url&quot; ## [5] &quot;eaglesWV.url_2&quot; &quot;eaglesWV_2&quot; &quot;iris&quot; &quot;med98&quot; ## [9] &quot;msleep&quot; &quot;my.abc&quot; &quot;my.mean&quot; &quot;x&quot; ## [13] &quot;year&quot; This means that the object you assigned your data is now in your “workspace.” The workspace is what I call the working memory of R. We can learn about the med98 data using command like dim(), names() and summary(). How big is the dataset overall? dim(med98) ## [1] 34 11 How man columns are there? names(med98) ## [1] &quot;station&quot; &quot;pH&quot; &quot;DO&quot; ## [4] &quot;cond&quot; &quot;temp&quot; &quot;alk&quot; ## [7] &quot;hard&quot; &quot;ZN&quot; &quot;spp.rich&quot; ## [10] &quot;spp.div&quot; &quot;prop.Achnanthes&quot; Are any of the variables categorical? summary(med98) ## station pH DO cond ## AR2 : 1 Min. :6.700 Min. :6.800 Min. : 40.00 ## AR3 : 1 1st Qu.:7.425 1st Qu.:7.500 1st Qu.: 76.25 ## AR5 : 1 Median :7.900 Median :7.600 Median :100.00 ## AR8 : 1 Mean :7.841 Mean :7.794 Mean :116.76 ## ARI : 1 3rd Qu.:8.200 3rd Qu.:8.175 3rd Qu.:150.00 ## BR2 : 1 Max. :8.800 Max. :8.800 Max. :240.00 ## (Other):28 ## temp alk hard ZN ## Min. : 8.00 Min. : 10.00 Min. : 10.00 Min. : 2.0 ## 1st Qu.:11.00 1st Qu.: 28.50 1st Qu.: 45.00 1st Qu.: 24.0 ## Median :12.50 Median : 46.50 Median : 62.00 Median : 54.0 ## Mean :13.06 Mean : 46.38 Mean : 66.76 Mean : 177.3 ## 3rd Qu.:15.00 3rd Qu.: 64.00 3rd Qu.: 90.50 3rd Qu.: 213.2 ## Max. :21.00 Max. :119.00 Max. :126.00 Max. :1735.0 ## ## spp.rich spp.div prop.Achnanthes ## Min. : 5.70 Min. :0.630 Min. :0.0200 ## 1st Qu.:18.77 1st Qu.:1.377 1st Qu.:0.2125 ## Median :22.85 Median :1.855 Median :0.3900 ## Mean :22.42 Mean :1.694 Mean :0.3756 ## 3rd Qu.:26.82 3rd Qu.:2.058 3rd Qu.:0.4950 ## Max. :42.00 Max. :2.830 Max. :0.7600 ## OPTIONAL:Plot the Mendley 1998 data As we’ll discuss in depth in a later section on plotting , one reason why the ggplot and ggpubr packages are so powerful is because they can easily plot things in good color schemes. We can make a basic scatter plot like this to show the positive correlation between Diatom species richness (the raw number of species identified in a given sample) on the x axis and species diversity on the y axis. First, load the ggpubr package using the library() command. Note that you might get some output in red text telling you about the packages; it looks scary but its not. library(ggpubr) Now plot the scatter plot. Note that the syntax for ggpubr requires that variables be contained within quotes. ggscatter(data = med98, y = &quot;spp.div&quot;,x = &quot;spp.rich&quot;) We can color-code the points by their pH ggscatter(data = med98, y = &quot;spp.div&quot;,x = &quot;spp.rich&quot;, color = &quot;pH&quot;) 11.7 Loading .csv files using RStudio [ ] Frequently in code I will have things written up to load data using the read.csv() command. However, there is a point-and-click way of loading spreadsheet data into RStudio too. There’s on pane in RStudio that doesn’t get used much by basic R users, the “Environment, History, Connections, Build, Git” pane (I think it might not have “Git” on it if you don’t have certain packages loaded). Figure 11.4: A list of files stored on GitHub. If you click on the spreadsheet-looking icon “Import Dataset” and select “From text (base)” you can navigate to where your .csv file is located and select it. A preview window will then pop up which will show you the raw (which should look like what you originally down loaded) and a preview of how RStudio will format the data. (If the preview doesn’t look right you can change some of the option in the drop down menus to see if things line up.) Figure 11.5: A list of files stored on GitHub. When you click “Import” RStudio will execute some code in the console (eg “Medley1998 &lt;- read.csv(”~/Medley1998.csv“)”) to load the data and then call the command View() to generate preview of the data in a new tab in the script view. (Note that this View panel only lets you look at the data; you can’t edit it.) 11.8 Challenge .csv files are the most common format for sharing data in R. “csv” stands for “comma seperate volume”, and you will note that each value on a line is seperated by a comma (some things with computers do make sense on the first try!). Sometimes you will encounter .txt files which separate data other ways, such as spaces, tabs, or by lining up everything explicitly in rows. On the wildlifeR GitHub directory we used before (https://github.com/brouwern/wildlifeR/tree/master/inst/extdata) these is a file “Medley1998.txt”. Download this file and load it using RStudio’s Import Dataset function. See if RStudio recognizes that its not .csv. "],
["loading-excel-spreadsheets-into-rstudio.html", "Chapter 12 Loading Excel spreadsheets into RStudio 12.1 Preparing a file for loading into R 12.2 Reload data", " Chapter 12 Loading Excel spreadsheets into RStudio re-save as .csv and load load directly In this walk through we first re-save this data in an R-compatible format, a “csv” file, called “Lab1_data_PA_eagles.csv”. 12.0.1 Prepping data in Excel 12.0.1.1 Save data to your R working directory (WD) Find the file https://github.com/brouwern/wildlifeR/tree/master/inst/extdata Save the file “Lab1_data_PA_eagles.xlsx” to your computers desktop. Today we will be using this as the “working directory” 12.0.1.2 Re-Save The Excel file as a “csv” file In Excel, follow these steps “File” “Save As” “Browse” Select the working directory (your desktop) Select “Save as type” Select “CSV (Comma delimited)” Click “Save” The data is now in a format that can be loaded into R. 12.1 Preparing a file for loading into R Things work best when your Excel file is “clean” &amp; only has exactly what you want in it. Any extra, accidental typing can cause problems or make things confusing. A good practice is to always highlight cells to the right of and below your data, right click &amp; select “Delete”. This will remove any accidental typing that occurred. Do this to the cells below your data also. 12.2 Reload data Reload data; be sure to include the “csv” at the end. Use this code “eaglesPA &lt;- read.csv(file =”eaglesPA.xlsx“)”. NOTE: I changed the name of the file to include “_w_2_states&quot; so that I wouldn’t overwrite the original file. Don’t use this code unless you changed the file name to the exact same thing #Use this code, w/o the &quot;#&quot; in front of it # eaglesPA &lt;- read.csv(file = &quot;eaglesPA.xlsx&quot;) #NOTE: I changed the name of the file to include &quot;_w_2_states&quot; so that I wouldn&#39;t overwrite the origina file. Don&#39;t use this code unless you changed the file name to the exact smame thing #eaglesPA &lt;- read.csv(file = &quot;./data/Lab1_data_PA_eaglesPA_w_2_states.csv&quot;) Type ls() to see what is now in your workspace ls() ## [1] &quot;crabs&quot; &quot;eagle.df&quot; &quot;eagles&quot; &quot;eaglesWV.url&quot; ## [5] &quot;eaglesWV.url_2&quot; &quot;eaglesWV_2&quot; &quot;iris&quot; &quot;med98&quot; ## [9] &quot;msleep&quot; &quot;my.abc&quot; &quot;my.mean&quot; &quot;x&quot; ## [13] &quot;year&quot; Look at the re-loaded eaglesPA data object summary(eaglesPA) dim(eaglesPA) head(eaglesPA) tail(eaglesPA) "],
["plotting-continous-data-in-r-with-ggplot2.html", "Chapter 13 Plotting continous data in R with ggplot2 13.1 Introduction 13.2 Introduction to ggplot using qplot 13.3 A basic plot in ggplot using qplot()", " Chapter 13 Plotting continous data in R with ggplot2 Nathan Brouwer, Phd brouwern@gmail.com https://github.com/brouwern (???) 13.1 Introduction We’re going to plot some data using the qplot() command We’ll need to have 2 packages loaded ggplot2, which has the function qplot() cowplot, which provides some nice defaults We’ll use the iris dataset that comes with R 13.1.1 Learning objectives 13.1.2 Learning goals 13.1.3 Functions &amp; Arguements 13.1.4 Packages 13.1.5 Files 13.1.6 Potential hangups 13.1.7 Outline 13.2 Introduction to ggplot using qplot 13.3 A basic plot in ggplot using qplot() Unless told otherwise, qplot plots dots qplot(y = Sepal.Length, x = Species, data = iris) "],
["box-plot-with-labels.html", "Chapter 14 Box plot with labels 14.1 Changing colors in R plots 14.2 Tweaking plots: changing the point size 14.3 Boxplot with qplot 14.4 Basic boxplot with colors 14.5 Basic boxplot lables 14.6 Histograms using qplot 14.7 Modifying histograms: titles with the main = argument", " Chapter 14 Box plot with labels R will usually generate labels for the x and y axes based on the command. These cab be changed by adding another command after the qplot() command Add The command + xlab(“…”) sets the labels for the x-axis, + ylab(“…”) for the y axis. Text for the labels goes in quotes (ie, “Iris species”). THe use of the “+” is different than for most other R packages Forgetting the quotes will cause the code to fail. Note that units (mm) are included for the y axis. qplot(y = Sepal.Length, x = Species, data = iris) + xlab(&quot;Iris Species&quot;) + ylab (&quot;Sepal Length (mm)&quot; ) 14.1 Changing colors in R plots 14.1.1 Changing colors in R plots part 1 If we wanted we could change the color of the dots using the argument “col =”. This code can be used to change the color of most types of plots in R. This doesn’t increase the information content of the figure but maybe makes it nicer to look at. qplot(y = Sepal.Length, x = Species, data = iris, color = &quot;red&quot;) + xlab(&quot;Iris Species&quot;) + ylab (&quot;Sepal Length (mm)&quot; ) 14.1.2 Changing colors in R plots part 2 #dopt w/color changes qplot(y = Sepal.Length, x = Species, data = iris, color = Species) + xlab(&quot;Iris Species&quot;) + ylab (&quot;Sepal Length (mm)&quot;) 14.2 Tweaking plots: changing the point size Run the code below, Can you see what changed? #dopt w/color changes qplot(y = Sepal.Length, x = Species, data = iris, color = Species, size = 3) + xlab(&quot;Iris Species&quot;) + ylab (&quot;Sepal Length (mm)&quot;) 14.3 Boxplot with qplot 14.3.1 Basic boxplot with qplot note use of arguement “geom = …” qplot(y = Sepal.Length, x = Species, data = iris, geom = &quot;boxplot&quot;) 14.4 Basic boxplot with colors same as before, using “color =” #dopt w/color changes qplot(y = Sepal.Length, x = Species, data = iris, geom = &quot;boxplot&quot;, color = Species) 14.5 Basic boxplot lables now use + xlab() and + ylab() qplot(y = Sepal.Length, x = Species, data = iris, geom = &quot;boxplot&quot;, color = Species) + xlab(&quot;Iris Species&quot;) + ylab (&quot;Sepal Length (mm)&quot;) 14.6 Histograms using qplot made with geom = “histogram” arguement very very easy to make in R with ggplot very very very hard to make in Excel You should make them all the time for you data! 14.6.1 Histograms of iris data This code makes a histogram of one of the iris species’ Petal.Length. Note that you don’t have “y =” or “x =” for a histogram! qplot(Petal.Length, data = iris) 14.6.2 Histogram with colors What does this show? qplot(Petal.Length, data = iris, fill = Species) 14.6.3 Histogram with axes labels qplot(Petal.Length, data = iris, fill = Species) + xlab (&quot;Sepal Length (mm)&quot;) 14.6.4 Multiple histograms: “Facets” What does this show? qplot(Petal.Length, data = iris, fill = Species, facets = Species ~.) Add a label to x-axis qplot(Petal.Length, data = iris, fill = Species, facets = Species ~.) + xlab(&quot;Sepal Length (mm)&quot;) 14.7 Modifying histograms: titles with the main = argument Titles are good for your own personal use but actually are almost never used in figures published in papers and books. We can add a title like this using the arguement “main =” qplot(Petal.Length, data = iris, fill = Species, main = &quot;Iris species histograms&quot;, facets = Species ~.) + xlab (&quot;Sepal Length (mm)&quot;) "],
["scatterplots-in-r-using-qplot.html", "Chapter 15 Scatterplots in R using qplot() 15.1 Introduction 15.2 Scatterplots: 2 continuous variables", " Chapter 15 Scatterplots in R using qplot() Nathan Brouwer, Phd brouwern@gmail.com https://github.com/brouwern (???) 15.1 Introduction 15.1.1 Learning objectives 15.1.2 Learning goals 15.1.3 Functions &amp; Arguements 15.1.4 Packages 15.1.5 Files 15.1.6 Potential hangups 15.1.7 Outline 15.2 Scatterplots: 2 continuous variables In this lab we’ll explore how to make scatterplots using the qplot() function in ggplot2. 15.2.1 R Preliminaries We’ll use the qplot() function in the ggplot package The cowplot package provides nice deafults for ggplot IMHO 15.2.2 Scatterplot of Iris data Let’s make a scatter plot, where we plot two continous, numeric variables against each other that is, both x and y variables are numbers; not categories I’ve forgotten the names of all the iris variables, so I’ll use the names() command to see what they are names(iris) I’ll plot the sepals against the petals qplot(y = Sepal.Length, x = Petal.Length, data = iris) Figure 15.1: Sepals vs. Petals 15.2.3 Scatter plot of mammal brain data Let’s look at another dataset 15.2.3.1 Preliminaries Get the data from the ggplot2 package data(msleep) 15.2.3.2 Look at the data dim(msleep) #How much data is there? head(msleep) #What does the data look like summary(msleep) #Summary of the data There are a number of “categorical” varibles in this dataset genus vore = carnivore, omnivore et order = taxonomic order conservation = conservation status (endangered, etc) For some reason they don’t load as “factor” variables (better known as categorical or grouping variables, but called “Factors” in R-land) We can make these factors using the factor() command msleep$vore &lt;- factor(msleep$vore) Now see what happens when you call summary() summary(msleep) Do the same for “order”&quot; msleep$order &lt;- factor(msleep$order) summary(msleep) And “conservation” msleep$conservation &lt;- factor(msleep$conservation) summary(msleep) 15.2.4 Make a basic scatterplot qplot(y = sleep_total, x = brainwt, data = msleep) Figure 15.2: Mammal sleep, raw data That looks really really ugly. It will work better if we “log transform the axes” qplot(y = log(sleep_rem), x = log(brainwt), data = msleep) Figure 15.3: Mammal sleep, logged data Things get logged all the time in stats. We’ll talk more about that later. 15.2.5 Add color coding to scatterplot qplot(y = log(sleep_rem), x = log(brainwt), data = msleep, color = vore) Figure 15.4: Add colors with color = 15.2.6 Add color &amp; shape coding to scatterplot qplot(y = log(sleep_rem), x = log(brainwt), data = msleep, color = vore, shape = vore) Figure 15.5: Add shapes with shape = 15.2.7 Put diffetrent “vores” in seperate panels Seperate panels can be made using the “facet” arguement withing qplot qplot(y = log(sleep_rem), x = log(brainwt), data = msleep, color = vore, shape = vore, facets = vore ~ .) Figure 15.6: Split into different panels w/ facets = 15.2.8 Add a “trend line”&quot; to a scatterplot Add the geom_smooth() function after the initial qplot() command This works best if we remove the “color = vore” command, but you can see what happens if you leave it qplot(y = log(sleep_rem), x = log(brainwt), data = msleep) + geom_smooth() Figure 15.7: Add trendline with + geom_smooth() 15.2.9 Exercise: Modify mammal brain code to do the following things Change the axes labels Add a title Use names(msleep) to see what other varibles are in the dataset Use summary(msleep) to whether they are continous or categorical Pick another continous variable and plot it instead of sleep_total Try this with and without logging "],
["review-loading-examining-data-in-r.html", "Chapter 16 Review: Loading &amp; Examining Data in R 16.1 Introduction 16.2 Example data for plotting: Fisher’s Irises 16.3 Loading data into R the easy way: pre-made data in an R “Package” 16.4 Load data that is in another R package 16.5 Load data that is in a package on CRAN 16.6 Loading packages directly using code 16.7 Troubleshooting package downloads", " Chapter 16 Review: Loading &amp; Examining Data in R Nathan Brouwer, Phd brouwern@gmail.com https://github.com/brouwern (???) 16.1 Introduction This exercise reviews the basics of loading data from a package into R. These basic skills are needed for the further tasks of plotting that will be built upon in this Section. 16.1.1 Learning objectives 16.1.2 Learning goals 16.1.3 Functions &amp; Arguements 16.1.4 Packages 16.1.5 Files 16.1.6 Potential hangups 16.1.7 Outline Intro Fisher’s Iris data Loading data: iris The easy way: from base R w/ data(iris) Loading packages in base R: MASS command: library(MASS) Loading packages from CRAN: cowplot This lab is based generally on Chapters 2 &amp; 3, Whitlock and Schulter, 2nd Ed 16.2 Example data for plotting: Fisher’s Irises Dataset made popular by R.A. Fisher Frequently used to explain/test stats procedures See ?iris for more details See also https://en.wikipedia.org/wiki/Iris_flower_data_set for more info. 16.3 Loading data into R the easy way: pre-made data in an R “Package” Getting data into R (or SAS, or ArcGIS…) can be a pain R comes with many datasets that are pre-loaded into it There are also many stat. techniques that can easily be added to R These are contained in “packages” 16.3.1 Load data that is already in the “base” distribution of R Fisher’s iris data comes automatically with R. You can load it into R’s memory using the command “data()” data(iris) #Load the iris data 16.3.2 Look at the iris data We’ll look at the iris data using some commands like ls(), dim(), and names(). You can check that it was loaded using the ls() command (“list”). ls() You can get info about the nature of the dataframe using commands like dim() dim(iris) This tells us that the iris data is essentially a spreadsheet that has 150 rows and 5 columns. We can get the column names with names() names(iris) Note that the first letter of each word is capitalized. What are the implications of this? The top of the data and the bottom of the data can be checked with head() and tail() commands head(iris) #top of dataframe tail(iris) #bottom of dataframe Another common R command is is(), which tells you what something is in R land. is(iris) R might spew a lot of things out at you when you use is() usually the 1st item is most important. Here, it tells us that the “object” called “iris” in your workspace is 1st and foremost a “data.frame” A dataframe is essentially a spreadsheet of data loaded into R. You can get basic info about the data themselves using commands like summary(). summary(iris) Which variables are numeric? Which variables are categories/groups (aka “factors”)? If you wanted info on just 1 column, you would tell R to isolate that column like this, using a dollar sign ($). summary(iris$Sepal.Width) That is, that name of the dataframe, a dollar sign ($), and the name of the column. What happens when you don’t capitalize something? Try these intentional mistakes (but remove the “#” from in front of each one): #all lower case summary(iris$sepal.width) # this won&#39;t work #just &quot;s&quot; in &quot;sepal&quot; lower case summary(iris$sepal.Width) #this won&#39;t work either #or what if you capitalize &quot;i&quot; in &quot;Iris&quot;? summary(Iris$Sepal.Width) #won&#39;t work either The first two error messages are not very informative; the 3rd one (“Error in summary(Iris$Sepal.Width) : object ‘Iris’ not found”) does make a little sense. 16.4 Load data that is in another R package 16.4.1 Packages that come with R Many scientists develop software for R, and they often include datasets to demonstrate how the software works. Some of this software, called a “package” comes with R already and just needs to be loaded. This is done with the library() command. The MASS package comes with R when you download it and has many useful functions and interesting datasets. library(MASS) #Load the MASS package MASS contains a dataset called called “mammals” data(mammals) You can confirm that the mammals data is in your workspace using ls() ls() You should now have both the “iris”&quot; and the “mammals”&quot; data in your R “workspace.”&quot; What is in the mammals dataset? Datasets actually usually have useful help files. Access help using the ? function. The help screen will pop up either within RStudio, or possibly in your web browser. It tells us that mammals is “A data frame with average brain and body weights for 62 species of land mammals.” Since this is someone else’s data, the authors of the MASS package need to provide proper citation. At the bottom we can see that these data come from the paper: Allison, T. and Cicchetti, D. V. (1976) Sleep in mammals: ecological and constitutional correlates. Science 194: 732-734. We can learn about the mammals data using the usual commands dim(mammals) names(mammals) head(mammals) tail(mammals) summary(mammals) 16.5 Load data that is in a package on CRAN 16.5.1 Packages from the CRAN website Most packages don’t come with R when you download it but are stored in a central site called CRAN. We’ll load the cowplot package. 16.5.2 Loading packages using R-Studio RStudio makes it easy to find and load packages. Follow these instructions. In the panel of RStudio that has the tabs “Plots”, “Packages”,“Help”, “Viewer” click on “Packages”&quot; On the next line it says “Install” and “Update”. Click on “Install” A window will pop up. In the white field in the middle of the window under “Packages” type the name of the package you want. RStudio will automatically bring up potential packages as you type. Finish typing “cowplot” or click on the name. Click on the “Install” button. In the source viewer some misc. test should show up. Most of the time this works. If it doesn’t, talk to the professor! If an R packages doesn’t load properly, it could be for several reasons. * 1st, your internet connection might be having problems. * 2nd, the website where the package is stored might be down for maintenance. * 3rd, the version of are you are using is probably newer than the version of R used to make the package. This is a real pain - ask for help from an expert R user if think you have this problem. 16.6 Loading packages directly using code You can also use the install.packages() command to try to load the package. I already have the doBy packaged downloaded to my computer so I have “commented out” the code with a “#”. To run the code, remove the “#”. If you already followed the instructions above you don’t need to run the code. install.packages(&quot;cowplot&quot;) 16.7 Troubleshooting package downloads 16.7.1 What if you tell R to install a package you already have downloaded? If you already have the package downloaded to your computer then a window will pop up asking you if you want to restart your computer. Normally this isn’t necessary; just click “no”. You might see a “warning” message pop up in the console such as “Warning in install.packages: package ‘doBy’ is in use and will not be installed”. This isn’t a problem for basic R work. If you are doing serious work (e.g. for a publication) you should restart R. 16.7.2 What if I can’t get a package I need loaded? Talk to someone who is good w/R (eg, your professor) Google something like “how to install R package” for general info Google something like “problem loading R package” Copy and paste any error message you might be getting into Google and see if anyone has written about this problem See above for reasons why a package might not load properly the 1st time you try. 16.7.3 Finding R help with Google There’s lots of info about R on the web, and if you have a problem, then someone else has probably had it before and perhaps written something about it. The website stackoverflow.com has lots of info about R. However, many people who use it are hard-core programmers, who can come across as jerks sometimes when they answer questions if you don’t follow the rules and protocols of stackoverflow. "],
["data-analysis-case-study-part-i-summary-statistics.html", "Chapter 17 Data analysis case study part I: summary statistics 17.1 Preliminaries 17.2 A 1st encounter with R: getting to know your data 17.3 A 1st encounter with R: summary statistics 17.4 A 1st encounter with dplyr 17.5 group_by 17.6 Data analysis case study part II: plotting your data 17.7 arms", " Chapter 17 Data analysis case study part I: summary statistics Nathan Brouwer, Phd brouwern@gmail.com https://github.com/brouwern (???) 17.1 Preliminaries 17.1.1 Load packages You might have to install or re-install wildlifeR using install.packages() library(devtools) install_github(&quot;brouwern/wildlifeR&quot;) 17.1.2 Load data data(frogarms) 17.1.3 Subset your data The function make_my_data2L() will extact out a random subset of the data. Change “my.code” to your school email address, minus the “(???)” or whatever your affiliation is. my.frogs &lt;- frogarms # my.frogs &lt;- make_my_data2L(dat = frogarms, # my.code = &quot;nlb24&quot;, # &lt;= change this! # cat.var = &quot;sex&quot;, # n.sample = 20, # with.rep = FALSE) n.sample is set to 20. This is set up to extract 20 unique individuals of each sex. Check that you dataframe is 2*20 = 40 rows using the dim() command. dim(my.frogs) 17.2 A 1st encounter with R: getting to know your data dim(my.frogs) nrow(my.frogs) ncol(my.frogs) head(my.frogs) tail(my.frogs) names(my.frogs) ?my.frogs 17.3 A 1st encounter with R: summary statistics R is a giant calcualter 17.3.1 Overall summary Whole dataframe summary(my.frogs) Just a single column summary(my.frogs$mass) Can compare your subset to the original data summary(my.frogs$mass) summary(frogarms$mass) Handy trick: stack up the data with rbind() rbind(summary(my.frogs$mass), summary(frogarms$mass)) 17.3.2 Individual summary stats mean(my.frogs$mass) var(my.frogs$mass) median() min() max() var() sd() range() nrow() or length() (for sample size) range() returns two values in a vector range(my.frogs$mass) Note that R doesn’t return a very common statistic, the standard error (SE). This can be calcualted by hand. sd(my.frogs$mass)/sqrt(length(my.frogs$mass)) Write a function my_sd1 &lt;- function(dat_column){ sd(dat_column)/sqrt(length(dat_column)) } my_sd2 &lt;- function(dat, column){ sd(dat[,column])/sqrt(length(dat[,column])) } my_sd3 &lt;- function(dat, column, digits.round = 3){ se &lt;- sd(dat[,column])/sqrt(length(dat[,column])) round(se, digits = digits.round) } my_sd2(dat = my.frogs, column = &quot;mass&quot;) 17.4 A 1st encounter with dplyr dplyr is a package that provides numerous functions for manipulating data. We will use two handy functions summarize() / summarise() group_by() dplyr can use a handy sytax that involes “pipes”. You can string together R commands using the function %&gt;% When using pipes, you start with a dataframe and follow it with an action you want done to it. So, for example, previously when we wanted the mean of the mass column we did this mean(my.frogs$mass) Which is kind of read like a normal mathematical equation or function, where you start from inside the parentheses and work out. R let’s you nest as many functions as you wnat. If i want to round my mean is wrap “mean(my.frogs$mass)” in round(…) round(mean(my.frogs$mass)) Using pipes to get the mean I write things more like a sentence: my.frogs$mass %&gt;% mean() #note parentheses. Which reads kind of like “Take the mass column and the datagrame and apply the mean() function to it.” Note that the parentheses have to be included even though there is nothing in them. To round the mean we would do this my.frogs$mass %&gt;% mean() %&gt;% round() Which read left to right like a sentence is “Take the mass column, calcualte the mean and then rond it.” Note that the rond() command has an arguement for how many digits you want to round to. You include that in the parantehes my.frogs$mass %&gt;% mean() %&gt;% round(digits = 2) 17.4.0.1 dplyr’s summarize() commnad INstead of mean(data$column) we can use summarise()/summarize() and pipes Grand mean of mass my.frogs %&gt;% summarise(mean(mass)) this is maybe more complicated than “mean(my.frogs$mass)” but overall the pipe framework and summarise pays off when combined with group_b() 17.5 group_by For some more info on group_by see https://www.r-bloggers.com/using-r-quickly-calculating-summary-statistics-with-dplyr/ https://www3.nd.edu/~steve/computing_with_data/24_dplyr/dplyr.html http://www.datacarpentry.org/R-genomics/04-dplyr.html We can use group_by() to slit things up by a categorical variable. Here, we can say “take my.frogs, split up the data by the sex column, and apply the mean function to each subset.” my.frogs %&gt;% group_by(sex) %&gt;% summarise(mean(mass)) note that the column heading in is mean(mass), which is what is in summarise(). A handy thing about sumarise is you can pass it lables. Mean mass by sex w/ label my.frogs %&gt;% group_by(sex) %&gt;% summarise(mass.mean = mean(mass)) You can lable thigns anything, eg “puppies”. my.frogs %&gt;% group_by(sex) %&gt;% summarise(puppies = mean(mass)) You can pass any summari function to summarise. We can give it sd to get the sd of mass by sex. my.frogs %&gt;% group_by(sex) %&gt;% summarise(mass.sd = sd(mass)) What makes dplyr::group_by and summarize() really powerful is that you can pass it multiple summary functions at the same time my.frogs %&gt;% group_by(sex) %&gt;% summarise(mass.mean = mean(mass), mass.sd = sd(mass)) dplyr has a handy function n() for getting your sample size. my.frogs %&gt;% group_by(sex) %&gt;% summarise(mass.mean = mean(mass), mass.sd = sd(mass), n = n()) Pass it a novel function r my.frogs %&gt;% group_by(sex) %&gt;% summarise(mass.mean = my_sd1(mass)) ## Alternatives ### doBy::summaryBy The doBy package has a nice syntax. I don’t really see manhy people use it library(doBy) summaryBy(mass ~ sex,data = my.frogs, FUN = mean) summaryBy(mass ~ sex,data = my.frogs, FUN = c(mean,sd)) 17.5.1 tapply() tapply is pretty old school tapply(X = my.frogs$mass,INDEX = my.frogs$sex, FUN = mean) 17.5.2 reshape2::dcast What I’ve used most of my career thus far. Am slowly switch to dplyr. library(reshape2) dcast(data = my.frogs, formula = sex ~ ., value.var = &quot;mass&quot;, fun.aggregate = mean) 17.6 Data analysis case study part II: plotting your data Nathan Brouwer, Phd brouwern@gmail.com https://github.com/brouwern (???) 17.6.1 Preliminaries library(devtools) install_github(&quot;brouwern/wildlifeR&quot;) 17.6.1.1 Load packagtes library(wildlifeR) library(ggplot2) library(cowplot) library(ggpubr) library(dplyr) 17.6.1.2 Load data data(frogarms) 17.6.1.3 Subset your data The function make_my_data2L() will extact out a random subset of the data. Change “my.code” to your school email address, minus the “(???)” or whatever your affiliation is. my.frogs &lt;- make_my_data2L(dat = frogarms, my.code = &quot;nlb24&quot;, # &lt;= change this! cat.var = &quot;sex&quot;, n.sample = 20, with.rep = FALSE) 17.6.2 Boxplots Basic boxplot ggboxplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;) Notched boxplot. We’ll use the original frogarms dataframe first for this THese aren’t commonly used; the notches work kind of like confidence intervals to determine if medians are different. ggboxplot(data = frogarms, y = &quot;mass&quot;, x = &quot;sex&quot;, notch = TRUE) Now try your own subset of the data. The Notch calculations likely get messed up with small samples sizes) ggboxplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, notch = TRUE) Add colored fill; note that it is “fill” not “color”. Color changes the color of the lines ggboxplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, notch = TRUE, fill = &quot;sex&quot;) We can turn off the notchign by adding a “#” character before it. This is called “commenting out” ggboxplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, #notch = TRUE, fill = &quot;sex&quot;) Add raw data. This works best with small datasts ggboxplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, #notch = TRUE, fill = &quot;sex&quot;, add = &quot;point&quot;) Jiter raw data This can be helpfu, though ggpubr::ggboxplot doesn’t allow much control over the “jittering”. Jittering helpful when you have large datsets and want to avoid overlap in the points. ggboxplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, #notch = TRUE, fill = &quot;sex&quot;, add = &quot;jitter&quot;) Label axes ggboxplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, notch = TRUE, fill = &quot;sex&quot;, add = &quot;jitter&quot;, xlab = &quot;Sex&quot;, #x axis (horizontal) ylab = &quot;Mass (g)&quot;) #y axis (vertical) Add title not usually done for publication but useful for keeping track of things and for presentations ggboxplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, notch = TRUE, fill = &quot;sex&quot;, add = &quot;jitter&quot;, xlab = &quot;Sex&quot;, ylab = &quot;Mass (g)&quot;, main = &quot;Mass of Australian frogs by sex&quot;) #Main title Move legend to bottom ggboxplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, notch = TRUE, fill = &quot;sex&quot;, add = &quot;jitter&quot;, xlab = &quot;Sex&quot;, ylab = &quot;Mass (g)&quot;, main = &quot;Mass of frogs by sex&quot;, legend = &quot;bottom&quot;) Change color pallete ggboxplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, # notch = TRUE, fill = &quot;sex&quot;, add = &quot;jitter&quot;, xlab = &quot;Sex&quot;, ylab = &quot;Mass (g)&quot;, main = &quot;Mass of frogs by sex&quot;, legend = &quot;bottom&quot;, palette = c(&quot;green&quot;,&quot;blue&quot;)) 17.6.2.1 Plotting multple plots with cowplot::plot_grid We can save a plot to an R object gg.my.frogs &lt;- ggboxplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;) Call just the object (eg, just type it into the console. or highlight jsut the word) gg.my.frogs Make an object using the frogarms data gg.frogarms &lt;- ggboxplot(data = frogarms, #use original data y = &quot;mass&quot;, x = &quot;sex&quot;) Now plot both plot_grid(gg.my.frogs, gg.frogarms) Add labels. Note that alignment is off sometimes. plot_grid(gg.my.frogs, gg.frogarms, labels = c(&quot;a)My fogs&quot;,&quot;b)All the frogs&quot;)) 17.6.3 Plot means with error bars Super hand function ggerrorplot() Default is mean +/- 1 standard error ggerrorplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;) Mean and se; note sd is not often used in publications ggerrorplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, desc_stat = &quot;mean_sd&quot;) Mean and 95% confidence interval ggerrorplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, desc_stat = &quot;mean_ci&quot;) Plot your data and original data #your data gg.my.frogs &lt;- ggerrorplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, desc_stat = &quot;mean_ci&quot;) #all of the data gg.all.frogs &lt;- ggerrorplot(data = frogarms, #change data y = &quot;mass&quot;, x = &quot;sex&quot;, desc_stat = &quot;mean_ci&quot;) plot_grid(gg.my.frogs, gg.all.frogs) Set colors ggerrorplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, desc_stat = &quot;mean_ci&quot;, color = &quot;sex&quot;) Add raw data. kinda crazy ggerrorplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, desc_stat = &quot;mean_ci&quot;, color = &quot;sex&quot;, shape = &quot;sex&quot;, add = &quot;point&quot;) Jitter raw data. even crazier ggerrorplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, desc_stat = &quot;mean_ci&quot;, color = &quot;sex&quot;, add = &quot;jitter&quot;) Back to just the means Increase size ggerrorplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, desc_stat = &quot;mean_ci&quot;, color = &quot;sex&quot;, size = 1.5) # Move legend to the bottom ?set all of this stuff as eval = F and have students figur eout how to add it? m aybe not - goal is just to do “1st encounter” ggerrorplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, desc_stat = &quot;mean_ci&quot;, color = &quot;sex&quot;, size = 1.5, xlab = &quot;Sex&quot;, ylab = &quot;Mass (g)&quot;, legend = &quot;bottom&quot;) # 17.7 arms ggerrorplot(data = frogarms, y = &quot;arm&quot;, x = &quot;sex&quot;, desc_stat = &quot;mean_ci&quot;, color = &quot;sex&quot;, size = 1.5, xlab = &quot;Sex&quot;, ylab = &quot;Mass (g)&quot;, legend = &quot;bottom&quot;) # "],
["data-analysis-case-study-part-iii-analysis-with-a-t-test.html", "Chapter 18 Data analysis case study part III: analysis with a t-test", " Chapter 18 Data analysis case study part III: analysis with a t-test Nathan Brouwer, Phd brouwern@gmail.com https://github.com/brouwern (???) 18.0.1 Preliminaries 18.0.1.1 Load packagtes library(wildlifeR) library(ggplot2) library(cowplot) library(ggpubr) library(dplyr) 18.0.1.2 Load data data(frogarms) 18.0.1.3 Subset your data The function make_my_data2L() will extact out a random subset of the data. Change “my.code” to your school email address, minus the “(???)” or whatever your affiliation is. my.frogs &lt;- make_my_data2L(dat = frogarms, my.code = &quot;nlb24&quot;, # &lt;= change this! cat.var = &quot;sex&quot;, n.sample = 20, with.rep = FALSE) t-test used to tell if two groups are different 18.0.2 T-test spits out R’s standard t.test table Save to object mass.t &lt;- t.test(mass ~ sex, data = my.frogs) look at w/broom::glance. relables thiugns a bit odd and would be nice to round. will stick with original R output library(broom) glance(mass.t) mass.t Check the means using dplyr my.frogs %&gt;% group_by(sex) %&gt;% summarize(mean.mass = mean(mass)) What does all of this mean? Quiz p = p interpretation = df = why df fractional? (this one is hard!) t = What would happen to p if t was bigger? What is a “95% CI” What is this a 95% CI for? What does the CI mean? plot_t_test_ES(mass.t) Make a plot of the means with error bars. Save to an object called gg.means gg.means &lt;-ggerrorplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, desc_stat = &quot;mean_ci&quot;) + ggtitle(&quot;Group means &amp; error bars&quot;) Save effect size gg.ES &lt;-plot_t_test_ES(mass.t) + ggtitle(&quot;__________ &amp; errorbars&quot;) Plot both plot_grid(gg.means,gg.ES) A hint gg.means &lt;-ggerrorplot(data = my.frogs, y = &quot;mass&quot;, x = &quot;sex&quot;, desc_stat = &quot;mean_ci&quot;) + ylab(&quot;Mass (g)&quot;) + xlab(&quot;Sex&quot;) + ggtitle(&quot;Group means &amp; error bars&quot;) gg.ES &lt;-plot_t_test_ES(mass.t) + ylab(&quot;Difference between groups (g)&quot;) + ggtitle(&quot;__________ &amp; errorbars&quot;) plot_grid(gg.means,gg.ES) Did anyone get a significant result? 18.0.3 Arm girth (do same thing for arm girth. see the super significant values?) Now we are going to unpack this There is a major flaw in this analysis. consider the following graph where the mass is plotted on the x-axis and the arm girth is plottedon the y-axis. Does arm girth vary just because of sex, or becasuse of sex and mass? This is ANCOVA. Sometimes taught as an extension of ANOVA, or as a type of regression. ggscatter(data = frogarms, y = &quot;arm&quot;, x = &quot;mass&quot;, color = &quot;sex&quot;) "],
["references-1.html", "References", " References "]
]
